Traceback (most recent call last):
  File "/opt/hostedtoolcache/Python/3.8.18/x64/lib/python3.8/site-packages/jupyter_cache/executors/utils.py", line 58, in single_nb_execution
    executenb(
  File "/opt/hostedtoolcache/Python/3.8.18/x64/lib/python3.8/site-packages/nbclient/client.py", line 1305, in execute
    return NotebookClient(nb=nb, resources=resources, km=km, **kwargs).execute()
  File "/opt/hostedtoolcache/Python/3.8.18/x64/lib/python3.8/site-packages/jupyter_core/utils/__init__.py", line 168, in wrapped
    return loop.run_until_complete(inner)
  File "/opt/hostedtoolcache/Python/3.8.18/x64/lib/python3.8/asyncio/base_events.py", line 616, in run_until_complete
    return future.result()
  File "/opt/hostedtoolcache/Python/3.8.18/x64/lib/python3.8/site-packages/nbclient/client.py", line 705, in async_execute
    await self.async_execute_cell(
  File "/opt/hostedtoolcache/Python/3.8.18/x64/lib/python3.8/site-packages/nbclient/client.py", line 1058, in async_execute_cell
    await self._check_raise_for_error(cell, cell_index, exec_reply)
  File "/opt/hostedtoolcache/Python/3.8.18/x64/lib/python3.8/site-packages/nbclient/client.py", line 914, in _check_raise_for_error
    raise CellExecutionError.from_cell_and_msg(cell, exec_reply_content)
nbclient.exceptions.CellExecutionError: An error occurred while executing the following cell:
------------------
# graph constructor function
def const_graph(nodes_df, edges_df, init):
    # convert df to dicts
    nodes_dict = nodes_df.to_dict('records')
    edges_dict = edges_df.to_dict('records')
    # start building nodes
    data_keys = ['id', 'label'] # cyto logic
    rest_keys = ['score', 'idInt', 'name', 'score', 'group', 'removed', 'selected',
                 'selectable', 'locked', 'grabbed', 'grabbable'] # cyto extra logic
    nodes_graph_list = []
    # now loop over nodes
    for node in nodes_dict:
        dict_node = {}
        data_sub_dict = {'data':{el:node[el] for el in data_keys}} # get MUST data info
        rest_sub_dict = {el:node[el] for el in node.keys() if el in rest_keys} # get extra data info
        dict_node = {**data_sub_dict,**rest_sub_dict} # zip them
        nodes_graph_list.append(dict_node) # add to the list
    # start building edges
    data_keys  = ['id', 'source', 'target'] # cyto logic
    data_keys2 = ['label', 'classes'] # cyto logic
    rest_keys  = ['score', 'weight', 'group', 'networkId', 'networkGroupId', 'intn',
                  'rIntnId', 'group', 'removed', 'selected', 'selectable', 'locked',
                  'grabbed', 'gra bbable', 'classes'] # cyto extra logic
    edges_graph_list = []
    # now loop over edges
    for edge in edges_dict:
        dict_edge = {}
        data_sub_dict = {el:edge[el] for el in data_keys} # get MUST data info
        data_sub_dict2 = {el:edge[el] for el in edge.keys() if el in data_keys2} # get MUST_2 data info
        rest_sub_dict = {el:edge[el] for el in edge.keys() if el in rest_keys} # get extra data info
        dict_edge = {'data':{**data_sub_dict,**data_sub_dict},**rest_sub_dict} # zip them
        edges_graph_list.append(dict_edge) # add to the list
    # create the combined edge+node dictionary
    total_graph_dict = {'nodes': nodes_graph_list, 'edges':edges_graph_list}
    # building the style
    all_node_style = ['background-color', 'background-opacity',
                     'font-family', 'font-size', 'label', 'width',
                     'shape', 'height', 'width', 'text-valign', 'text-halign', 'underlay-color' ,'underlay-shape']
    all_edge_style = ['background-color', 'background-opacity',
                     'font-family', 'font-size', 'label', 'width', 'line-color', 'arrow', 'type', 'target-arrow-shape']
    total_style_dict = {}
    style_elements = []
    # now construct the node styles
    for node in nodes_dict:
        node_dict = {'selector': f'node[id = \"{node["id"]}\"]'}
        style_dict ={"style": { el:node[el] for el in node.keys() if el in all_node_style}}
        node_dict.update(style_dict)
        style_elements.append(node_dict)
    # now construct the edge styles
    for edge in edges_dict:
        edge_dict = {'selector': f'edge[id = \"{edge["id"]}\"]'}
        style_dict = {"style": { el:edge[el] for el in edge.keys() if el in all_edge_style}}
        edge_dict.update(style_dict)
        style_elements.append(edge_dict)
    # now create the graph
    data_graph = json.dumps(total_graph_dict)
    json_to_python = json.loads(data_graph)
    # result_cyto = CytoscapeWidget()
    cyto_graph.graph.clear()
    cyto_graph.graph.add_graph_from_json(json_to_python)
    cyto_graph.set_style(style_elements)
    # also save the initial json to a file
    if init:
        json_filename = 'init_config.json'
        style_filename = 'init_style.json'
        cyto_graph.set_layout(name = 'circle')
    else:
        json_filename = 'curr_config.json'
        style_filename = 'curr_style.json'
        cyto_graph.set_layout(name = 'breadthfirst')
    with open(json_filename, 'w') as outfile:
        json.dump(json_to_python, outfile)
    with open(style_filename, 'w') as outfile:
        json.dump(json_to_python, outfile)
    # and return it
    #return result_cyto

# reset the graph
def res_graph(node):
    with out:
        cyto_graph.graph.clear()
        const_graph(df_nodes[df_nodes['subgraph'] == 'initial'], df_edges[df_nodes['subgraph'] == 'initial'], init=True)

def log_clicks(node):
    with out:
        new_nodes = df_nodes['subgraph'] == node['data']['id'].replace(' ','')
        const_graph(df_nodes[new_nodes], df_edges[new_nodes], init=False)
        if len(df_edges[new_nodes]) == 0 or len(df_nodes[new_nodes]) == 0:
            print('Empty subgraph, resetting view...')
            res_graph(node)
  

# instantiate an jupyternotebook output
out = Output()
# instantiate a graph
cyto_graph = CytoscapeWidget() # ok now create the cytoscape object
const_graph(df_nodes[df_nodes['subgraph'] == 'initial'], df_edges[df_nodes['subgraph'] == 'initial'], init=True)

#cyto_graph.on('node', 'click', log_clicks) # dynamically listen to left clicks
cyto_graph.on('node', 'cxttap', res_graph) # dynamically listen to right clicks
cyto_graph.on('node', 'click', log_clicks)


display(cyto_graph) # display the object
display(out) # display the output
------------------


[0;31m---------------------------------------------------------------------------[0m
[0;31mKeyError[0m                                  Traceback (most recent call last)
File [0;32m/opt/hostedtoolcache/Python/3.8.18/x64/lib/python3.8/site-packages/pandas/core/indexes/base.py:3653[0m, in [0;36mIndex.get_loc[0;34m(self, key)[0m
[1;32m   3652[0m [38;5;28;01mtry[39;00m:
[0;32m-> 3653[0m     [38;5;28;01mreturn[39;00m [38;5;28;43mself[39;49m[38;5;241;43m.[39;49m[43m_engine[49m[38;5;241;43m.[39;49m[43mget_loc[49m[43m([49m[43mcasted_key[49m[43m)[49m
[1;32m   3654[0m [38;5;28;01mexcept[39;00m [38;5;167;01mKeyError[39;00m [38;5;28;01mas[39;00m err:

File [0;32m/opt/hostedtoolcache/Python/3.8.18/x64/lib/python3.8/site-packages/pandas/_libs/index.pyx:147[0m, in [0;36mpandas._libs.index.IndexEngine.get_loc[0;34m()[0m

File [0;32m/opt/hostedtoolcache/Python/3.8.18/x64/lib/python3.8/site-packages/pandas/_libs/index.pyx:176[0m, in [0;36mpandas._libs.index.IndexEngine.get_loc[0;34m()[0m

File [0;32mpandas/_libs/hashtable_class_helper.pxi:7080[0m, in [0;36mpandas._libs.hashtable.PyObjectHashTable.get_item[0;34m()[0m

File [0;32mpandas/_libs/hashtable_class_helper.pxi:7088[0m, in [0;36mpandas._libs.hashtable.PyObjectHashTable.get_item[0;34m()[0m

[0;31mKeyError[0m: 'subgraph'

The above exception was the direct cause of the following exception:

[0;31mKeyError[0m                                  Traceback (most recent call last)
Cell [0;32mIn[5], line 97[0m
[1;32m     95[0m [38;5;66;03m# instantiate a graph[39;00m
[1;32m     96[0m cyto_graph [38;5;241m=[39m CytoscapeWidget() [38;5;66;03m# ok now create the cytoscape object[39;00m
[0;32m---> 97[0m const_graph(df_nodes[[43mdf_nodes[49m[43m[[49m[38;5;124;43m'[39;49m[38;5;124;43msubgraph[39;49m[38;5;124;43m'[39;49m[43m][49m [38;5;241m==[39m [38;5;124m'[39m[38;5;124minitial[39m[38;5;124m'[39m], df_edges[df_nodes[[38;5;124m'[39m[38;5;124msubgraph[39m[38;5;124m'[39m] [38;5;241m==[39m [38;5;124m'[39m[38;5;124minitial[39m[38;5;124m'[39m], init[38;5;241m=[39m[38;5;28;01mTrue[39;00m)
[1;32m     99[0m [38;5;66;03m#cyto_graph.on('node', 'click', log_clicks) # dynamically listen to left clicks[39;00m
[1;32m    100[0m cyto_graph[38;5;241m.[39mon([38;5;124m'[39m[38;5;124mnode[39m[38;5;124m'[39m, [38;5;124m'[39m[38;5;124mcxttap[39m[38;5;124m'[39m, res_graph) [38;5;66;03m# dynamically listen to right clicks[39;00m

File [0;32m/opt/hostedtoolcache/Python/3.8.18/x64/lib/python3.8/site-packages/pandas/core/frame.py:3761[0m, in [0;36mDataFrame.__getitem__[0;34m(self, key)[0m
[1;32m   3759[0m [38;5;28;01mif[39;00m [38;5;28mself[39m[38;5;241m.[39mcolumns[38;5;241m.[39mnlevels [38;5;241m>[39m [38;5;241m1[39m:
[1;32m   3760[0m     [38;5;28;01mreturn[39;00m [38;5;28mself[39m[38;5;241m.[39m_getitem_multilevel(key)
[0;32m-> 3761[0m indexer [38;5;241m=[39m [38;5;28;43mself[39;49m[38;5;241;43m.[39;49m[43mcolumns[49m[38;5;241;43m.[39;49m[43mget_loc[49m[43m([49m[43mkey[49m[43m)[49m
[1;32m   3762[0m [38;5;28;01mif[39;00m is_integer(indexer):
[1;32m   3763[0m     indexer [38;5;241m=[39m [indexer]

File [0;32m/opt/hostedtoolcache/Python/3.8.18/x64/lib/python3.8/site-packages/pandas/core/indexes/base.py:3655[0m, in [0;36mIndex.get_loc[0;34m(self, key)[0m
[1;32m   3653[0m     [38;5;28;01mreturn[39;00m [38;5;28mself[39m[38;5;241m.[39m_engine[38;5;241m.[39mget_loc(casted_key)
[1;32m   3654[0m [38;5;28;01mexcept[39;00m [38;5;167;01mKeyError[39;00m [38;5;28;01mas[39;00m err:
[0;32m-> 3655[0m     [38;5;28;01mraise[39;00m [38;5;167;01mKeyError[39;00m(key) [38;5;28;01mfrom[39;00m [38;5;21;01merr[39;00m
[1;32m   3656[0m [38;5;28;01mexcept[39;00m [38;5;167;01mTypeError[39;00m:
[1;32m   3657[0m     [38;5;66;03m# If we have a listlike key, _check_indexing_error will raise[39;00m
[1;32m   3658[0m     [38;5;66;03m#  InvalidIndexError. Otherwise we fall through and re-raise[39;00m
[1;32m   3659[0m     [38;5;66;03m#  the TypeError.[39;00m
[1;32m   3660[0m     [38;5;28mself[39m[38;5;241m.[39m_check_indexing_error(key)

[0;31mKeyError[0m: 'subgraph'

